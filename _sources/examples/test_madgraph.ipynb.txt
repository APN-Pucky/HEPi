{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fcca5058",
   "metadata": {},
   "source": [
    "# MadGraph example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b583970e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1.6.20+dirty\n",
      "/opt/MG5_aMC_v2_7_0/\n"
     ]
    }
   ],
   "source": [
    "import hepi\n",
    "print(hepi.__version__)\n",
    "import smpl\n",
    "import numpy as np\n",
    "import hepi.madgraph as mg\n",
    "import hepi.util as util\n",
    "import matplotlib.pyplot as plt\n",
    "mg.set_path(\"/opt/MG5_aMC_v2_7_0/\")\n",
    "print (mg.get_path())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7d048757",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "2dd526dd",
   "metadata": {},
   "source": [
    "## No on-shell subtraction through madstr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ed7216a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running: 15 jobs\n",
      "./output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.out\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/bin/sh: line 1: /opt/MG5_aMC_v2_7_0/bin/mg5_aMC: No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n",
      "cp: cannot stat './output/dd6217160a629c3e78f6d632d334ec2a5503b99be880523928b954ab6f432446.bdir': No such file or directory\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Array must not contain infs or nans.",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_3679/832802357.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0mmg_dl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mli\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mskip\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mmadstr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 14\u001b[0;31m         \u001b[0mhepi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmass_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmg_dl\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"LO\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpa\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlogy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     15\u001b[0m         \u001b[0mhepi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmass_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmg_dl\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\"NLO\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mpa\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mlogy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     16\u001b[0m         \u001b[0mhepi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtitle\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgca\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mli\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mscenario\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m\"mastercode\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/hepi/plot.py\u001b[0m in \u001b[0;36mmass_plot\u001b[0;34m(dict_list, y, part, logy, yaxis, yscale, label, **kwargs)\u001b[0m\n\u001b[1;32m     62\u001b[0m               **kwargs):\n\u001b[1;32m     63\u001b[0m     \u001b[0mdict_list\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"mass_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpart\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mget_mass\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdict_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mabs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpart\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 64\u001b[0;31m     _plot(dict_list,\n\u001b[0m\u001b[1;32m     65\u001b[0m           \u001b[0;34m\"mass_\"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpart\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     66\u001b[0m           \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/hepi/plot.py\u001b[0m in \u001b[0;36m_plot\u001b[0;34m(dict_list, x, y, label, xaxis, yaxis, ratio, K, K_plus_1, logy, yscale, mask, **kwargs)\u001b[0m\n\u001b[1;32m    146\u001b[0m         \u001b[0mvy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvy\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0msplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    147\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 148\u001b[0;31m     \u001b[0m_vplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlabel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxaxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myaxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlogy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0myscale\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmask\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmask\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    149\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    150\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/.local/lib/python3.8/site-packages/hepi/plot.py\u001b[0m in \u001b[0;36m_vplot\u001b[0;34m(x, y, label, xaxis, yaxis, logy, yscale, interpolate, plot_data, data_color, mask, fill, data_fmt, fmt, print_area, **kwargs)\u001b[0m\n\u001b[1;32m    204\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0minterpolate\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    205\u001b[0m         \u001b[0;31m#print(vx,vy)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 206\u001b[0;31m         \u001b[0mspl\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmake_interp_spline\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0munv\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# type: BSpline\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    207\u001b[0m         \u001b[0mpower_smooth\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mspl\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxnew\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    208\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfill\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.8/site-packages/scipy/interpolate/_bsplines.py\u001b[0m in \u001b[0;36mmake_interp_spline\u001b[0;34m(x, y, k, t, bc_type, axis, check_finite)\u001b[0m\n\u001b[1;32m   1238\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1239\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_as_float_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_finite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1240\u001b[0;31m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_as_float_array\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcheck_finite\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1241\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1242\u001b[0m     \u001b[0my\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmoveaxis\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m    \u001b[0;31m# now internally interp axis is zero\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/usr/lib/python3.8/site-packages/scipy/interpolate/_bsplines.py\u001b[0m in \u001b[0;36m_as_float_array\u001b[0;34m(x, check_finite)\u001b[0m\n\u001b[1;32m     34\u001b[0m     \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcheck_finite\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misfinite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mall\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 36\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Array must not contain infs or nans.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     37\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     38\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Array must not contain infs or nans."
     ]
    }
   ],
   "source": [
    "params = [\n",
    "    \"mastercode_with_gm2.in\",\n",
    "]\n",
    "pss = [    \n",
    "      (1000011,-1000011),\n",
    "     ]\n",
    "for pa,pb in pss:\n",
    "    for param in params:\n",
    "        i = hepi.Input(hepi.Order.NLO,13000,pa,pb,param,\"cteq6l1\",\"cteq66\",1., 1.,model=\"/opt/MG5_aMC_v2_7_0/models/MSSMatNLO_UFO\")\n",
    "        li = [i]\n",
    "        li = hepi.mass_scan([i],pa, np.linspace(100,1000,7+8))\n",
    "        mg_dl = mg.run(li,skip=False,madstr=False)\n",
    "        \n",
    "        hepi.mass_plot(mg_dl,\"LO\",pa,logy=True)\n",
    "        hepi.mass_plot(mg_dl,\"NLO\",pa,logy=True)\n",
    "        hepi.title(plt.gca(),li[0],scenario=\"mastercode\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67938ee0",
   "metadata": {},
   "source": [
    "## On-shell subtraction through madstr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4628188f",
   "metadata": {},
   "outputs": [],
   "source": [
    "params = [\n",
    "    \"mastercode_with_gm2.in\",\n",
    "]\n",
    "pss = [    \n",
    "      (1000022,1000022),\n",
    "     ]\n",
    "for pa,pb in pss:\n",
    "    for param in params:\n",
    "        i = hepi.Input(hepi.Order.NLO,13000,pa,pb,param,\"cteq6l1\",\"cteq66\",1., 1.,model=\"/opt/MG5_aMC_v2_7_0/models/EWKino_NLO_UFO_py3\")\n",
    "        li = [i]\n",
    "        li = hepi.mass_scan([i],pa, np.linspace(100,1000,7+8))\n",
    "        mg_dl = mg.run(li,skip=False,madstr=True)\n",
    "        hepi.mass_plot(mg_dl,\"LO\",pa,logy=True)\n",
    "        hepi.mass_plot(mg_dl,\"NLO\",pa,logy=True)\n",
    "        hepi.title(plt.gca(),li[0],scenario=\"mastercode\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bde9afca",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19e4273a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
