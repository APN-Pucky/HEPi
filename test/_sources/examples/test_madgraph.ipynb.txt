{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fcca5058",
   "metadata": {},
   "source": [
    "# MadGraph example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "b583970e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1.8.9+dirty\n",
      "/opt/MG5_aMC_v2_7_3/\n"
     ]
    }
   ],
   "source": [
    "import hepi\n",
    "print(hepi.__version__)\n",
    "import smpl\n",
    "import numpy as np\n",
    "import hepi.madgraph as mg\n",
    "import hepi.util as util\n",
    "import matplotlib.pyplot as plt\n",
    "mg.set_path(\"/opt/MG5_aMC_v2_7_3/\")\n",
    "print (mg.get_path())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2dd526dd",
   "metadata": {},
   "source": [
    "## No on-shell subtraction through madstr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "ed7216a4",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running: 15 jobs\n",
      "./output/09f0fa80d6ffa4d16b6c3b7f888df66d3c6debf643b46bfa1441c5a941d5bc4a.out\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/MG5_aMC_v2_7_3/HEPTools/HEPToolsInstallers/HEPToolInstaller.py:510: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  _mg5_version = LooseVersion(line[9:].strip())\n",
      "/opt/MG5_aMC_v2_7_3/HEPTools/HEPToolsInstallers/HEPToolInstaller.py:456: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  if tool_name in ['lhapdf6', 'lhapdf'] and MG5_version and MG5_version < LooseVersion(\"2.6.1\"):\n",
      "/opt/MG5_aMC_v2_7_3/HEPTools/HEPToolsInstallers/HEPToolInstaller.py:255: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  ( lambda MG5version: MG5version < LooseVersion(\"2.6.1\"),\n",
      "Detected 'ninja' missing dependency: 'oneloop'. Will install it now.\n",
      "Fetching data with command:\n",
      "  wget --no-check-certificate http://helac-phegas.web.cern.ch/helac-phegas/tar-files/OneLOop-3.6.tgz\n",
      "--2022-06-08 11:43:47--  http://helac-phegas.web.cern.ch/helac-phegas/tar-files/OneLOop-3.6.tgz\n",
      "Resolving helac-phegas.web.cern.ch... 188.184.100.128\n",
      "Connecting to helac-phegas.web.cern.ch|188.184.100.128|:80... connected.\n",
      "HTTP request sent, awaiting response... 301 Moved Permanently\n",
      "Location: https://helac-phegas.web.cern.ch/tar-files/OneLOop-3.6.tgz [following]\n",
      "--2022-06-08 11:43:48--  https://helac-phegas.web.cern.ch/tar-files/OneLOop-3.6.tgz\n",
      "Connecting to helac-phegas.web.cern.ch|188.184.100.128|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 111734 (109K) [application/x-compressed]\n",
      "Saving to: ‘OneLOop-3.6.tgz’\n",
      "\n",
      "     0K .......... .......... .......... .......... .......... 45% 1.40M 0s\n",
      "    50K .......... .......... .......... .......... .......... 91% 2.99M 0s\n",
      "   100K .........                                             100%  156M=0.05s\n",
      "\n",
      "2022-06-08 11:43:48 (2.08 MB/s) - ‘OneLOop-3.6.tgz’ saved [111734/111734]\n",
      "\n",
      "Installing tool 'oneloop'...\n",
      "    > Follow the installation progress by running the command below in a separate terminal)\n",
      "    > tail -f /opt/MG5_aMC_v2_7_3/HEPTools/oneloop/oneloop_install.log\n",
      "    > Successful installation of dependency 'oneloop' in '/opt/MG5_aMC_v2_7_3/HEPTools'.\n",
      "    > See installation log at '/opt/MG5_aMC_v2_7_3/HEPTools/oneloop/oneloop_install.log'.\n",
      "Fetching data with command:\n",
      "  wget --no-check-certificate https://ninja.hepforge.org/downloads//ninja-1.1.0.tar.gz\n",
      "--2022-06-08 11:44:27--  https://ninja.hepforge.org/downloads//ninja-1.1.0.tar.gz\n",
      "Resolving ninja.hepforge.org... 129.234.186.186\n",
      "Connecting to ninja.hepforge.org|129.234.186.186|:443... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: /downloads?f=/ninja-1.1.0.tar.gz [following]\n",
      "--2022-06-08 11:44:27--  https://ninja.hepforge.org/downloads?f=/ninja-1.1.0.tar.gz\n",
      "Reusing existing connection to ninja.hepforge.org:443.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: /downloads?f=ninja-1.1.0.tar.gz [following]\n",
      "--2022-06-08 11:44:27--  https://ninja.hepforge.org/downloads?f=ninja-1.1.0.tar.gz\n",
      "Reusing existing connection to ninja.hepforge.org:443.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: unspecified [application/x-gzip]\n",
      "Saving to: ‘ninja-1.1.0.tar.gz’\n",
      "\n",
      "     0K .......... .......... .......... .......... ..........  771K\n",
      "    50K .......... .......... .......... .......... .......... 1.53M\n",
      "   100K .......... .......... .......... .......... ..........  224M\n",
      "   150K .......... .......... .......... .......... .......... 1.63M\n",
      "   200K .......... .......... .......... .......... .......... 17.9M\n",
      "   250K .......... .......... .......... .......... ..........  181M\n",
      "   300K .......... .......... .......... .......... ..........  206M\n",
      "   350K .......... .......... .......... .......... .......... 1.63M\n",
      "   400K .......... .......... .......... .......... .......... 36.0M\n",
      "   450K .......... .......... .......... .......... ..........  180M\n",
      "   500K .......... .......... .......... .......... ..........  163M\n",
      "   550K .......... .......                                      219M=0.2s\n",
      "\n",
      "2022-06-08 11:44:27 (3.42 MB/s) - ‘ninja-1.1.0.tar.gz’ saved [581566]\n",
      "\n",
      "Installing tool 'ninja'...\n",
      "    > Follow the installation progress by running the command below in a separate terminal)\n",
      "    > tail -f /opt/MG5_aMC_v2_7_3/HEPTools/ninja/ninja_install.log\n",
      "Successful installation of 'ninja' in '/opt/MG5_aMC_v2_7_3/HEPTools'.\n",
      "/opt/MG5_aMC_v2_7_3/HEPTools/HEPToolsInstallers/HEPToolInstaller.py:510: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  _mg5_version = LooseVersion(line[9:].strip())\n",
      "/opt/MG5_aMC_v2_7_3/HEPTools/HEPToolsInstallers/HEPToolInstaller.py:456: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  if tool_name in ['lhapdf6', 'lhapdf'] and MG5_version and MG5_version < LooseVersion(\"2.6.1\"):\n",
      "/opt/MG5_aMC_v2_7_3/HEPTools/HEPToolsInstallers/HEPToolInstaller.py:255: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.\n",
      "  ( lambda MG5version: MG5version < LooseVersion(\"2.6.1\"),\n",
      "Fetching data with command:\n",
      "  wget --no-check-certificate http://collier.hepforge.org//collier-latest.tar.gz\n",
      "--2022-06-08 11:49:29--  http://collier.hepforge.org//collier-latest.tar.gz\n",
      "Resolving collier.hepforge.org... 129.234.186.186\n",
      "Connecting to collier.hepforge.org|129.234.186.186|:80... connected.\n",
      "HTTP request sent, awaiting response... 302 Found\n",
      "Location: https://collier.hepforge.org/collier-latest.tar.gz [following]\n",
      "--2022-06-08 11:49:29--  https://collier.hepforge.org/collier-latest.tar.gz\n",
      "Connecting to collier.hepforge.org|129.234.186.186|:443... connected.\n",
      "HTTP request sent, awaiting response... 200 OK\n",
      "Length: 933676 (912K) [application/x-gzip]\n",
      "Saving to: ‘collier-latest.tar.gz’\n",
      "\n",
      "     0K .......... .......... .......... .......... ..........  5%  808K 1s\n",
      "    50K .......... .......... .......... .......... .......... 10% 1.54M 1s\n",
      "   100K .......... .......... .......... .......... .......... 16% 55.5M 0s\n",
      "   150K .......... .......... .......... .......... .......... 21% 1.51M 0s\n",
      "   200K .......... .......... .......... .......... .......... 27%  146M 0s\n",
      "   250K .......... .......... .......... .......... .......... 32%  136M 0s\n",
      "   300K .......... .......... .......... .......... .......... 38%  137M 0s\n",
      "   350K .......... .......... .......... .......... .......... 43% 1.61M 0s\n",
      "   400K .......... .......... .......... .......... .......... 49% 24.1M 0s\n",
      "   450K .......... .......... .......... .......... .......... 54%  207M 0s\n",
      "   500K .......... .......... .......... .......... .......... 60%  229M 0s\n",
      "   550K .......... .......... .......... .......... .......... 65%  175M 0s\n",
      "   600K .......... .......... .......... .......... .......... 71% 8.41M 0s\n",
      "   650K .......... .......... .......... .......... .......... 76% 15.2M 0s\n",
      "   700K .......... .......... .......... .......... .......... 82%  212M 0s\n",
      "   750K .......... .......... .......... .......... .......... 87% 2.76M 0s\n",
      "   800K .......... .......... .......... .......... .......... 93% 98.5M 0s\n",
      "   850K .......... .......... .......... .......... .......... 98% 19.4M 0s\n",
      "   900K .......... .                                          100%  313M=0.2s\n",
      "\n",
      "2022-06-08 11:49:29 (4.66 MB/s) - ‘collier-latest.tar.gz’ saved [933676/933676]\n",
      "\n",
      "Installing tool 'collier'...\n",
      "    > Follow the installation progress by running the command below in a separate terminal)\n",
      "    > tail -f /opt/MG5_aMC_v2_7_3/HEPTools/collier/collier_install.log\n",
      "Successful installation of 'collier' in '/opt/MG5_aMC_v2_7_3/HEPTools'.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No module named 'madgraph'\n",
      " No hepmc reader since No module named 'madgraph' \u001b[1;30m[lhe_parser.py at line 50]\u001b[0m\n",
      "INFO: ************************************************************\n",
      "*                                                          *\n",
      "*           W E L C O M E  to  M A D G R A P H 5           *\n",
      "*                       a M C @ N L O                      *\n",
      "*                                                          *\n",
      "*                 *                       *                *\n",
      "*                   *        * *        *                  *\n",
      "*                     * * * * 5 * * * *                    *\n",
      "*                   *        * *        *                  *\n",
      "*                 *                       *                *\n",
      "*                                                          *\n",
      "*         VERSION 5.2.7.3.py3           20xx-xx-xx         *\n",
      "*                                                          *\n",
      "*    The MadGraph5_aMC@NLO Development Team - Find us at   *\n",
      "*                 http://amcatnlo.cern.ch                  *\n",
      "*                                                          *\n",
      "*               Type 'help' for in-line help.              *\n",
      "*                                                          *\n",
      "************************************************************ \n",
      "INFO: load configuration from /home/apn/data/de.neuwirthinformatik.Alexander/Development/git/hepi/docs/source/examples/output/09f0fa80d6ffa4d16b6c3b7f888df66d3c6debf643b46bfa1441c5a941d5bc4a.bdir/Cards/amcatnlo_configuration.txt  \n",
      "INFO: load configuration from /opt/MG5_aMC_v2_7_3/input/mg5_configuration.txt  \n",
      "INFO: load configuration from /home/apn/data/de.neuwirthinformatik.Alexander/Development/git/hepi/docs/source/examples/output/09f0fa80d6ffa4d16b6c3b7f888df66d3c6debf643b46bfa1441c5a941d5bc4a.bdir/Cards/amcatnlo_configuration.txt  \n",
      "Using default eps viewer \"evince\". Set another one in ./input/mg5_configuration.txt\n",
      "Using default web browser \"firefox\". Set another one in ./input/mg5_configuration.txt\n",
      "calculate_xsect -f\n",
      "INFO: will run in mode: NLO \n",
      "INFO: Starting run \n",
      "INFO: Compiling the code \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO: Using LHAPDF v6.3.0 interface for PDFs \n",
      "INFO: Compiling source... \n",
      "INFO:           ...done, continuing with P* directories \n",
      "\u001b[1;34mWARNING: Could not compile StdHEP because its source directory could not be found in the SOURCE folder.\n",
      " Check the MG5_aMC option 'output_dependencies'.\n",
      " This will prevent the use of HERWIG6/Pythia6 shower. \u001b[0m\n",
      "INFO: Compiling directories... \n",
      "INFO: Compiling on 8 cores \n",
      "INFO:  Compiling P0_uux_elmelp... \n",
      "INFO:  Compiling P0_ddx_elmelp... \n",
      "INFO:  Compiling P0_uxu_elmelp... \n",
      "INFO:  Compiling P0_dxd_elmelp... \n",
      "INFO:     P0_ddx_elmelp done. \n",
      "INFO:     P0_uxu_elmelp done. \n",
      "INFO:     P0_uux_elmelp done. \n",
      "INFO:     P0_dxd_elmelp done. \n",
      "INFO: Checking test output: \n",
      "INFO: P0_uux_elmelp \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_ddx_elmelp \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_uxu_elmelp \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_dxd_elmelp \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: Starting run \n",
      "INFO: Using 8 cores \n",
      "INFO: Cleaning previous results \n",
      "INFO: Doing fixed order NLO \n",
      "INFO: Setting up grids \n",
      "INFO:  Idle: 0,  Running: 4,  Completed: 0 [ current time: 11h58 ] \n",
      "INFO:  Idle: 0,  Running: 3,  Completed: 1 [  0.33s  ] \n",
      "INFO:  Idle: 0,  Running: 2,  Completed: 2 [  0.36s  ] \n",
      "INFO:  Idle: 0,  Running: 1,  Completed: 3 [  0.48s  ] \n",
      "INFO:  Idle: 0,  Running: 0,  Completed: 4 [  0.69s  ] \n",
      "INFO: \n",
      "      Results after grid setup:\n",
      "      Total cross section:      2.489e-01 +- 1.5e-03 pb\n",
      " \n",
      "INFO: Refining results, step 1 \n",
      "INFO:  Idle: 0,  Running: 5,  Completed: 0 [ current time: 11h58 ] \n",
      "INFO:  Idle: 0,  Running: 4,  Completed: 1 [  0.25s  ] \n",
      "INFO:  Idle: 0,  Running: 3,  Completed: 2 [  0.33s  ] \n",
      "INFO:  Idle: 0,  Running: 2,  Completed: 3 [  1.1s  ] \n",
      "INFO:  Idle: 0,  Running: 1,  Completed: 4 [  1.2s  ] \n",
      "INFO:  Idle: 0,  Running: 0,  Completed: 5 [  1.2s  ] \n",
      "INFO: \n",
      "   --------------------------------------------------------------\n",
      "      Final results and run summary:\n",
      "      Process p p > 1000011 -1000011 [QCD]\n",
      "      Run at p-p collider (6500.0 + 6500.0 GeV)\n",
      "      Total cross section: 2.468e-01 +- 9.1e-04 pb\n",
      "   --------------------------------------------------------------\n",
      " \n",
      "INFO: The results of this run and the HwU and GnuPlot files with the plots have been saved in /home/apn/data/de.neuwirthinformatik.Alexander/Development/git/hepi/docs/source/examples/output/09f0fa80d6ffa4d16b6c3b7f888df66d3c6debf643b46bfa1441c5a941d5bc4a.bdir/Events/run_01 \n",
      "INFO: Run complete \n",
      "INFO:  \n",
      "quit\n",
      "INFO:  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "stty: stty: 'standard input''standard input': Inappropriate ioctl for device\n",
      ": Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for devicestty: \n",
      "'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: stty: 'standard input''standard input': Inappropriate ioctl for device\n",
      ": Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for devicestty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "\n",
      "stty: stty: stty: stty: 'standard input''standard input': Inappropriate ioctl for device\n",
      ": Inappropriate ioctl for device\n",
      "'standard input': Inappropriate ioctl for device\n",
      "stty: stty: stty: 'standard input': Inappropriate ioctl for device\n",
      "'standard input': Inappropriate ioctl for device\n",
      "'standard input': Inappropriate ioctl for device\n",
      "'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "params = [\n",
    "    \"mastercode_with_gm2.in\",\n",
    "]\n",
    "pss = [    \n",
    "      (1000011,-1000011),\n",
    "     ]\n",
    "for pa,pb in pss:\n",
    "    for param in params:\n",
    "        i = hepi.Input(hepi.Order.NLO,13000,pa,pb,param,\"cteq6l1\",\"cteq66\",1., 1.,model=\"/opt/MG5_aMC_v2_7_3/models/MSSMatNLO_UFO\")\n",
    "        li = [i]\n",
    "        li = hepi.mass_scan([i],pa, np.linspace(100,1000,7+8))\n",
    "        mg_dl = mg.run(li,skip=False,madstr=False)\n",
    "        \n",
    "        hepi.mass_plot(mg_dl,\"LO\",pa,logy=True)\n",
    "        hepi.mass_plot(mg_dl,\"NLO\",pa,logy=True)\n",
    "        hepi.title(plt.gca(),li[0],scenario=\"mastercode\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67938ee0",
   "metadata": {},
   "source": [
    "## On-shell subtraction through madstr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "4628188f",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Running: 15 jobs\n",
      "./output/90bcfe8bc719ea89d80f8ce26ccfc425f6ff8937aec2e0a3f8031ea161b0d4cc.out\n",
      "No module named 'madgraph'\n",
      " No hepmc reader since No module named 'madgraph' \u001b[1;30m[lhe_parser.py at line 50]\u001b[0m\n",
      "INFO: ************************************************************\n",
      "*                                                          *\n",
      "*           W E L C O M E  to  M A D G R A P H 5           *\n",
      "*                       a M C @ N L O                      *\n",
      "*                                                          *\n",
      "*                 *                       *                *\n",
      "*                   *        * *        *                  *\n",
      "*                     * * * * 5 * * * *                    *\n",
      "*                   *        * *        *                  *\n",
      "*                 *                       *                *\n",
      "*                                                          *\n",
      "*         VERSION 5.2.7.3.py3           20xx-xx-xx         *\n",
      "*                                                          *\n",
      "*    The MadGraph5_aMC@NLO Development Team - Find us at   *\n",
      "*                 http://amcatnlo.cern.ch                  *\n",
      "*                                                          *\n",
      "*               Type 'help' for in-line help.              *\n",
      "*                                                          *\n",
      "************************************************************ \n",
      "INFO: load configuration from /home/apn/data/de.neuwirthinformatik.Alexander/Development/git/hepi/docs/source/examples/output/90bcfe8bc719ea89d80f8ce26ccfc425f6ff8937aec2e0a3f8031ea161b0d4cc.bdir/Cards/amcatnlo_configuration.txt  \n",
      "INFO: load configuration from /opt/MG5_aMC_v2_7_3/input/mg5_configuration.txt  \n",
      "INFO: load configuration from /home/apn/data/de.neuwirthinformatik.Alexander/Development/git/hepi/docs/source/examples/output/90bcfe8bc719ea89d80f8ce26ccfc425f6ff8937aec2e0a3f8031ea161b0d4cc.bdir/Cards/amcatnlo_configuration.txt  \n",
      "Using default eps viewer \"evince\". Set another one in ./input/mg5_configuration.txt\n",
      "Using default web browser \"firefox\". Set another one in ./input/mg5_configuration.txt\n",
      "calculate_xsect -f\n",
      "INFO: will run in mode: NLO \n",
      "INFO: Starting run \n",
      "INFO: Compiling the code \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "write ./param_card.dat\n",
      "INFO: MadSTR: Forcing width MDL_WSUL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSUL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSCL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSCL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSUR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSUR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSCR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSCR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSDL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSDL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSSL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSSL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSBL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSBL to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSDR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSDR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSSR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSSR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MDL_WSBR to zero inside param_card.inc \n",
      "INFO: MadSTR: Forcing width MP__MDL_WSBR to zero inside param_card.inc \n",
      "\u001b[1;34mWARNING: The replacements above ensure poles cancelation, and affect all widths\n",
      "   EXCEPT those which enter the resonance-treatment counterterms, which\n",
      "   are taken from the param_card.\n",
      "   Do NOT set these widths to zero in the param_card. \u001b[0m\n",
      "INFO: Using LHAPDF v6.3.0 interface for PDFs \n",
      "INFO: Compiling source... \n",
      "INFO:           ...done, continuing with P* directories \n",
      "\u001b[1;34mWARNING: Could not compile StdHEP because its source directory could not be found in the SOURCE folder.\n",
      " Check the MG5_aMC option 'output_dependencies'.\n",
      " This will prevent the use of HERWIG6/Pythia6 shower. \u001b[0m\n",
      "INFO: Compiling directories... \n",
      "INFO: Compiling on 8 cores \n",
      "INFO:  Compiling P0_uux_n1n1... \n",
      "INFO:  Compiling P0_ccx_n1n1... \n",
      "INFO:  Compiling P0_ddx_n1n1... \n",
      "INFO:  Compiling P0_ssx_n1n1... \n",
      "INFO:  Compiling P0_uxu_n1n1... \n",
      "INFO:  Compiling P0_cxc_n1n1... \n",
      "INFO:  Compiling P0_dxd_n1n1... \n",
      "INFO:  Compiling P0_sxs_n1n1... \n",
      "INFO:     P0_uux_n1n1 done. \n",
      "INFO:  Compiling P0_bbx_n1n1... \n",
      "INFO:     P0_ddx_n1n1 done. \n",
      "INFO:  Compiling P0_bxb_n1n1... \n",
      "INFO:     P0_sxs_n1n1 done. \n",
      "INFO:     P0_uxu_n1n1 done. \n",
      "INFO:     P0_cxc_n1n1 done. \n",
      "INFO:     P0_dxd_n1n1 done. \n",
      "INFO:     P0_ccx_n1n1 done. \n",
      "INFO:     P0_ssx_n1n1 done. \n",
      "INFO:     P0_bxb_n1n1 done. \n",
      "INFO:     P0_bbx_n1n1 done. \n",
      "INFO: Checking test output: \n",
      "INFO: P0_uux_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_ccx_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_ddx_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_ssx_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_uxu_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_cxc_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_dxd_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_sxs_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_bbx_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: P0_bxb_n1n1 \n",
      "INFO:  Result for test_ME: \n",
      "INFO:    Passed. \n",
      "INFO:  Result for check_poles: \n",
      "INFO:    Poles successfully cancel for 20 points over 20 (tolerance=1.0e-05) \n",
      "INFO: Starting run \n",
      "INFO: Using 8 cores \n",
      "INFO: Cleaning previous results \n",
      "INFO: Doing fixed order NLO \n",
      "INFO: Setting up grids \n",
      "INFO:  Idle: 2,  Running: 8,  Completed: 0 [ current time: 13h11 ] \n",
      "INFO:  Idle: 1,  Running: 8,  Completed: 1 [  13.4s  ] \n",
      "INFO:  Idle: 0,  Running: 8,  Completed: 2 [  14.2s  ] \n",
      "INFO:  Idle: 0,  Running: 7,  Completed: 3 [  15.1s  ] \n",
      "INFO:  Idle: 0,  Running: 6,  Completed: 4 [  15.2s  ] \n",
      "INFO:  Idle: 0,  Running: 5,  Completed: 5 [  15.6s  ] \n",
      "INFO:  Idle: 0,  Running: 4,  Completed: 6 [  17.9s  ] \n",
      "INFO:  Idle: 0,  Running: 3,  Completed: 7 [  21.1s  ] \n",
      "INFO:  Idle: 0,  Running: 2,  Completed: 8 [  21.7s  ] \n",
      "INFO:  Idle: 0,  Running: 1,  Completed: 9 [  23.3s  ] \n",
      "INFO:  Idle: 0,  Running: 0,  Completed: 10 [  23.4s  ] \n",
      "INFO: \n",
      "      Results after grid setup:\n",
      "      Total cross section:      7.316e-06 +- 2.4e-07 pb\n",
      " \n",
      "INFO: Refining results, step 1 \n",
      "INFO:  Idle: 2,  Running: 8,  Completed: 0 [ current time: 13h11 ] \n",
      "INFO:  Idle: 1,  Running: 8,  Completed: 1 [  16.8s  ] \n",
      "INFO:  Idle: 0,  Running: 8,  Completed: 2 [  18.1s  ] \n",
      "INFO:  Idle: 0,  Running: 7,  Completed: 3 [  18.5s  ] \n",
      "INFO:  Idle: 0,  Running: 6,  Completed: 4 [  18.8s  ] \n",
      "INFO:  Idle: 0,  Running: 5,  Completed: 5 [  21.4s  ] \n",
      "INFO:  Idle: 0,  Running: 4,  Completed: 6 [  24.9s  ] \n",
      "INFO:  Idle: 0,  Running: 3,  Completed: 7 [  26.9s  ] \n",
      "INFO:  Idle: 0,  Running: 2,  Completed: 8 [  28.7s  ] \n",
      "INFO:  Idle: 0,  Running: 1,  Completed: 9 [  30.8s  ] \n",
      "INFO:  Idle: 0,  Running: 0,  Completed: 10 [  31s  ] \n",
      "INFO: \n",
      "   --------------------------------------------------------------\n",
      "      Final results and run summary:\n",
      "      Process p p > 1000022 1000022 [QCD]\n",
      "      Run at p-p collider (6500.0 + 6500.0 GeV)\n",
      "      Total cross section: 7.403e-06 +- 1.2e-07 pb\n",
      "   --------------------------------------------------------------\n",
      " \n",
      "INFO: The results of this run and the HwU and GnuPlot files with the plots have been saved in /home/apn/data/de.neuwirthinformatik.Alexander/Development/git/hepi/docs/source/examples/output/90bcfe8bc719ea89d80f8ce26ccfc425f6ff8937aec2e0a3f8031ea161b0d4cc.bdir/Events/run_01 \n",
      "INFO: Run complete \n",
      "INFO:  \n",
      "quit\n",
      "INFO:  \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n",
      "stty: 'standard input': Inappropriate ioctl for device\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "params = [\n",
    "    \"mastercode_with_gm2.in\",\n",
    "]\n",
    "pss = [    \n",
    "      (1000022,1000022),\n",
    "     ]\n",
    "for pa,pb in pss:\n",
    "    for param in params:\n",
    "        i = hepi.Input(hepi.Order.NLO,13000,pa,pb,param,\"cteq6l1\",\"cteq66\",1., 1.,model=\"/opt/MG5_aMC_v2_7_3/models/EWKino_NLO_UFO\")\n",
    "        li = [i]\n",
    "        li = hepi.mass_scan([i],pa, np.linspace(100,1000,7+8))\n",
    "        mg_dl = mg.run(li,skip=False,madstr=True)\n",
    "        hepi.mass_plot(mg_dl,\"LO\",pa,logy=True)\n",
    "        hepi.mass_plot(mg_dl,\"NLO\",pa,logy=True)\n",
    "        hepi.title(plt.gca(),li[0],scenario=\"mastercode\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bde9afca",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19e4273a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
