:py:mod:`hepi`
==============

.. py:module:: hepi

.. autoapi-nested-parse::

   
















   ..
       !! processed by numpydoc !!


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   cluster/index.rst
   madgraph/index.rst
   resummino/index.rst
   spheno/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   input/index.rst
   plot/index.rst
   results/index.rst
   util/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   hepi.Order
   hepi.Input
   hepi.Result
   hepi.Input



Functions
~~~~~~~~~

.. autoapisummary::

   hepi.get_LR_partner
   hepi.lhapdf_name_to_id
   hepi.namehash
   hepi.get_input_dir
   hepi.get_output_dir
   hepi.set_input_dir
   hepi.set_output_dir
   hepi.set_pre
   hepi.get_pre
   hepi.update_slha
   hepi.scan
   hepi.scale_scan
   hepi.seven_point_scan
   hepi.pdf_scan
   hepi.change_where
   hepi.scan_invariant_mass
   hepi.mass_scan
   hepi.slha_scan
   hepi.slha_scan_rel
   hepi.LD2DL
   hepi.pdf_error
   hepi.scale_error
   hepi.combine_errors
   hepi.LD2DL
   hepi.get_name
   hepi.get_LR_partner
   hepi.namehash
   hepi.lhapdf_id_to_name
   hepi.lhapdf_name_to_id
   hepi.get_input_dir
   hepi.get_name
   hepi.tex_table
   hepi.title
   hepi.energy_plot
   hepi.combined_energy_plot
   hepi.combined_plot
   hepi.get_mass
   hepi.mass_plot
   hepi.mass_vplot
   hepi.plot
   hepi.index_open
   hepi.slha_data
   hepi.slha_plot
   hepi.vplot
   hepi.mass_mapplot
   hepi.mapplot
   hepi.map_vplot
   hepi.err_plt
   hepi.scale_plot
   hepi.central_scale_plot
   hepi.mass_and_K_plot
   hepi.mass_and_ratio_plot



Attributes
~~~~~~~~~~

.. autoapisummary::

   hepi.in_dir
   hepi.out_dir
   hepi.pre
   hepi.required_numerical_uncertainty_factor
   hepi.lhapdf_id_name
   hepi.lhapdf_name_id
   hepi.fig
   hepi.axs
   hepi.lines
   hepi.labels
   hepi.package
   hepi.version
   hepi.__version__


.. py:function:: get_LR_partner(id: int) -> Tuple[int, int]

   
   Transforms a PDG id to it's left-right partner.

   Args:
       id (int) : PDG Monte Carlo identifier for the particle.

   Returns:
       tuple : First int is -1 for Left and 1 for Right. Second int is the PDG id.

   Examples:
       >>> get_LR_partner(1000002)
       (-1, 2000002)















   ..
       !! processed by numpydoc !!

.. py:function:: lhapdf_name_to_id(name: str) -> int

   
   Converts a LHAPDF name to the sets id.

   Args:
       name (str) : LHAPDF set name.

   Returns:
       int: id of the LHAPDF set.

   Examples:
       >>> lhapdf_name_to_id("EPPS16_B_90CL_Au_hess")
       30101175















   ..
       !! processed by numpydoc !!

.. py:function:: namehash(n: any) -> str

   
   Creates a sha256 hash from the objects string representation.

   Args:
       n (any) : object.

   Returns:
       str: sha256 of object.

   Examples:
       >>> p = {'a':1,'b':2}
       >>> str(p)
       "{'a': 1, 'b': 2}"
       >>> namehash(str(p))
       '3dffaea891e5dbadb390da33bad65f509dd667779330e2720df8165a253462b8'
       >>> namehash(p)
       '3dffaea891e5dbadb390da33bad65f509dd667779330e2720df8165a253462b8'















   ..
       !! processed by numpydoc !!

.. py:data:: in_dir
   :annotation: = ./input/

   
   input directory
















   ..
       !! processed by numpydoc !!

.. py:data:: out_dir
   :annotation: = ./output/

   
   output directory
















   ..
       !! processed by numpydoc !!

.. py:data:: pre
   :annotation: = nice -n 5

   
   run command prefix.
















   ..
       !! processed by numpydoc !!

.. py:function:: get_input_dir()

   
   Get the input directory.
















   ..
       !! processed by numpydoc !!

.. py:function:: get_output_dir()

   
   Get the input directory.
















   ..
       !! processed by numpydoc !!

.. py:function:: set_input_dir(ind)

   
   Sets the input directory.
















   ..
       !! processed by numpydoc !!

.. py:function:: set_output_dir(outd)

   
   Sets the output directory.
















   ..
       !! processed by numpydoc !!

.. py:function:: set_pre(ppre)

   
   Sets the command prefix. 
















   ..
       !! processed by numpydoc !!

.. py:function:: get_pre()

   
   Gets the command prefix. 
















   ..
       !! processed by numpydoc !!

.. py:class:: Order

   Bases: :py:obj:`enum.IntEnum`

   
   Computation orders.
















   ..
       !! processed by numpydoc !!
   .. py:attribute:: LO
      :annotation: = 0

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: NLO
      :annotation: = 1

      
















      ..
          !! processed by numpydoc !!

   .. py:attribute:: NLO_PLUS_NLL
      :annotation: = 2

      
















      ..
          !! processed by numpydoc !!


.. py:class:: Input(order: Order, energy, particle1: int, particle2: int, slha: str, pdf_lo: str, pdf_nlo: str, mu_f=1.0, mu_r=1.0, pdfset_lo=0, pdfset_nlo=0, precision=0.01, max_iters=50, invariant_mass='auto', result='total', pt='auto', id='', model_path='/opt/MG5_aMC_v2_7_0/models/MSSMatNLO_UFO')

   
   Input for computation.
















   ..
       !! processed by numpydoc !!

.. py:function:: update_slha(i: Input)

   
   Updates dependent parameters in Input `i`.

   Mainly concerns the `mu` value used by `madgraph`.















   ..
       !! processed by numpydoc !!

.. py:function:: scan(l: List[Input], var: str, range) -> List[Input]

   
   Scans a variable `var` over `range` in `l`.
















   ..
       !! processed by numpydoc !!

.. py:function:: scale_scan(l: List[Input], range=3, distance=2.0)

   
   Scans scale by varying `mu_f` and `mu_r`.
   They take `range` values from 1/`distance` to `distance` in lograthmic spacing.
   Only points with `mu_f`=`mu_r` or `mu_r/f`=1 or `mu_r/f`=`distance` or `mu_r/f`=1/`distance` are returned.
















   ..
       !! processed by numpydoc !!

.. py:function:: seven_point_scan(l: List[Input])

   
   Scans scale by varying `mu_f` and `mu_r` by factors of two excluding relative factors of 4.
















   ..
       !! processed by numpydoc !!

.. py:function:: pdf_scan(l: List[Input])

   
   Scans NLO PDF sets. 

   The PDF sets are infered from `lhapdf.getPDFSet` with the argument of `pdfset_nlo`.















   ..
       !! processed by numpydoc !!

.. py:function:: change_where(l: List[Input], dicts: dict, **kwargs)

   
   Applies the values of `dicts` if the key value pairs in `kwargs` agree with a member of the list `l`.

   The changes only applied to the matching list members.















   ..
       !! processed by numpydoc !!

.. py:function:: scan_invariant_mass(l: List[Input], diff, points, low=0.001)

   
   Logarithmic `invariant_mass` scan close to the production threshold.
















   ..
       !! processed by numpydoc !!

.. py:function:: mass_scan(l: List[Input], var: int, range, diff_L_R=None) -> List[Input]

   
   Scans the PDG identified mass `var` over `range` in the list `l`.
   `diff_L_R` allows to set a fixed difference between masses of left- and right-handed particles.
















   ..
       !! processed by numpydoc !!

.. py:function:: slha_scan(l: List[Input], block, var, range: List) -> List[Input]

   
   Scan a generic 
















   ..
       !! processed by numpydoc !!

.. py:function:: slha_scan_rel(l: List[Input], lambdas, range: List) -> List[Input]

   
   Scan a generic slha variable.
















   ..
       !! processed by numpydoc !!

.. py:function:: LD2DL(l: List)

   
   Convert a list of objects into a dictionary of lists.

   The values of each object are first converted to a `dict` through the `__dict__` attribute.

   Args:
       l (List) : list of objects.

   Returns:
       dict : dictionary of numpy arrays.

   Examples:
       >>> class Param:
       ...      def __init__(self,a,b,c):
       ...         self.a = a
       ...         self.b = b
       ...         self.c = c
       >>> LD2DL([ Param(1,2,3), Param(4,5,6) , Param(7,8,9) ])
       {'a': array([1, 4, 7]), 'b': array([2, 5, 8]), 'c': array([3, 6, 9])}















   ..
       !! processed by numpydoc !!

.. py:data:: required_numerical_uncertainty_factor
   :annotation: = 10

   
   If the numerical uncertainty is :attr:`required_numerical_uncertainty_factor` times higher than the scale or pdf uncertainty a warning is shown.
















   ..
       !! processed by numpydoc !!

.. py:class:: Result(lo=None, nlo=None, nlo_plus_nll=None)

   
   General result class.

   Attributes:
       LO (:obj:`double`): Leading Order result. Defaults to None.
       NLO (:obj:`double`): Next-to-Leading Order result. Defaults to None.
       NLO_PLUS_NLL (:obj:`double`): Next-to-Leading Order plus Next-to-Leading Logarithm result. Defaults to None.
       K_LO (:obj:`double`): LO divided by LO.
       K_NLO (:obj:`double`): NLO divided by LO result.
       K_NLO_PLUS_NLL (:obj:`double`): NLO+NLL divided by LO.
       NLO_PLUS_NLL_OVER_NLO (:obj:`double`): NLO+NLL divided by NLO.















   ..
       !! processed by numpydoc !!

.. py:function:: pdf_error(li, dl, confidence_level=90)

   
   Computes Parton Density Function (PDF) uncertainties through :func:`lhapdf.set.uncertainty`.

   Args:
       li (:obj:`list` of :class:`Input`): Input list.
       dl (:obj:`dict`): :class:`Result` dictionary with lists per entry.
       confidence_level (:obj:`double`): Confidence Level for PDF uncertainty

   Returns:
       :obj:`dict`: Modified `dl` with new `LO`/`NLO`/`NLO_PLUS_NLL` _ `PDF`/`PDF_CENTRAL`/`PDF_ERRPLUS`/`PDF_ERRMINUS`/`PDF_ERRSYM` entries.
           - `LO`/`NLO`/`NLO_PLUS_NLL` _ `PDF` contains a symmetrized :mod:`uncertainties` object.















   ..
       !! processed by numpydoc !!

.. py:function:: scale_error(li, dl)

   
   Computes seven-point scale uncertainties from the results where the renormalization and factorization scales are varied by factors of 2 and  relative factors of four are excluded (cf. :func:`seven_point_scan`).

   Args:
       li (:obj:`list` of :class:`Input`): Input list.
       dl (:obj:`dict`): :class:`Result` dictionary with lists per entry.

   Returns:
       :obj:`dict`: Modified `dl` with new `LO`/`NLO`/`NLO_PLUS_NLL` _ `SCALE`/`SCALE_ERRPLUS`/`SCALE_ERRMINUS`/`SCALE_ERRSYM` entries.
           - `LO`/`NLO`/`NLO_PLUS_NLL` _ `SCALE` contains a symmetrized :mod:`uncertainties` object.















   ..
       !! processed by numpydoc !!

.. py:function:: combine_errors(dl)

   
   Combines seven-point scale uncertainties and pdf uncertainties from the results by Pythagorean addition.

   Note:
       Running :func:`scale_errors` and :func:`pdf_errors` before is necessary.

   Args:
       dl (:obj:`dict`): :class:`Result` dictionary with lists per entry.

   Returns:
       :obj:`dict`: Modified `dl` with new `LO`/`NLO`/`NLO_PLUS_NLL` _ `COMBINED`/`ERRPLUS`/`ERRMINUS` entries.
           - `LO`/`NLO`/`NLO_PLUS_NLL` _ `COMBINED` contains a symmetrized :mod:`uncertainties` object.















   ..
       !! processed by numpydoc !!

.. py:function:: LD2DL(l: List)

   
   Convert a list of objects into a dictionary of lists.

   The values of each object are first converted to a `dict` through the `__dict__` attribute.

   Args:
       l (List) : list of objects.

   Returns:
       dict : dictionary of numpy arrays.

   Examples:
       >>> class Param:
       ...      def __init__(self,a,b,c):
       ...         self.a = a
       ...         self.b = b
       ...         self.c = c
       >>> LD2DL([ Param(1,2,3), Param(4,5,6) , Param(7,8,9) ])
       {'a': array([1, 4, 7]), 'b': array([2, 5, 8]), 'c': array([3, 6, 9])}















   ..
       !! processed by numpydoc !!

.. py:function:: get_name(id: int) -> str

   
   Get the latex name of a particle.

   Args:
       id (int) : PDG Monte Carlo identifier for the particle.

   Returns:
       str: Latex name.

   Examples:
       >>> get_name(21)
       'g'
       >>> get_name(1000022)
       '\\tilde{\\chi}_{1}^{0}'















   ..
       !! processed by numpydoc !!

.. py:function:: get_LR_partner(id: int) -> Tuple[int, int]

   
   Transforms a PDG id to it's left-right partner.

   Args:
       id (int) : PDG Monte Carlo identifier for the particle.

   Returns:
       tuple : First int is -1 for Left and 1 for Right. Second int is the PDG id.

   Examples:
       >>> get_LR_partner(1000002)
       (-1, 2000002)















   ..
       !! processed by numpydoc !!

.. py:function:: namehash(n: any) -> str

   
   Creates a sha256 hash from the objects string representation.

   Args:
       n (any) : object.

   Returns:
       str: sha256 of object.

   Examples:
       >>> p = {'a':1,'b':2}
       >>> str(p)
       "{'a': 1, 'b': 2}"
       >>> namehash(str(p))
       '3dffaea891e5dbadb390da33bad65f509dd667779330e2720df8165a253462b8'
       >>> namehash(p)
       '3dffaea891e5dbadb390da33bad65f509dd667779330e2720df8165a253462b8'















   ..
       !! processed by numpydoc !!

.. py:data:: lhapdf_id_name
   :annotation: :dict

   
   Dictionary of lhapdf names for given id.
















   ..
       !! processed by numpydoc !!

.. py:data:: lhapdf_name_id
   :annotation: :dict

   
   Dictionary of lhapdf id for given name.

   Inversion of :attr:`lhapdf_id_name`.















   ..
       !! processed by numpydoc !!

.. py:function:: lhapdf_id_to_name(lid: int) -> str

   
   Converts a LHAPDF id to the sets name.

   Args:
       lid (int) : LHAPDF set id.

   Returns:
       str: name of the LHAPDF set.

   Examples:
       >>> lhapdf_id_to_name(30101175)
       'EPPS16_B_90CL_Au_hess'















   ..
       !! processed by numpydoc !!

.. py:function:: lhapdf_name_to_id(name: str) -> int

   
   Converts a LHAPDF name to the sets id.

   Args:
       name (str) : LHAPDF set name.

   Returns:
       int: id of the LHAPDF set.

   Examples:
       >>> lhapdf_name_to_id("EPPS16_B_90CL_Au_hess")
       30101175















   ..
       !! processed by numpydoc !!

.. py:class:: Input(order: Order, energy, particle1: int, particle2: int, slha: str, pdf_lo: str, pdf_nlo: str, mu_f=1.0, mu_r=1.0, pdfset_lo=0, pdfset_nlo=0, precision=0.01, max_iters=50, invariant_mass='auto', result='total', pt='auto', id='', model_path='/opt/MG5_aMC_v2_7_0/models/MSSMatNLO_UFO')

   
   Input for computation.
















   ..
       !! processed by numpydoc !!

.. py:function:: get_input_dir()

   
   Get the input directory.
















   ..
       !! processed by numpydoc !!

.. py:function:: get_name(id: int) -> str

   
   Get the latex name of a particle.

   Args:
       id (int) : PDG Monte Carlo identifier for the particle.

   Returns:
       str: Latex name.

   Examples:
       >>> get_name(21)
       'g'
       >>> get_name(1000022)
       '\\tilde{\\chi}_{1}^{0}'















   ..
       !! processed by numpydoc !!

.. py:function:: tex_table(dict_list, key, fname, scale=True, pdf=True, yscale=1.0)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: title(axe, i: hepi.input.Input, scenario='', diff_L_R=None, extra='', **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: energy_plot(dict_list, y, yscale=1.0, xaxis='E [GeV]', yaxis='$\\sigma$ [pb]', label=None, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: combined_energy_plot(dict_list, t, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: combined_plot(func, dict_list, t, *args, label=None, fill=False, fmt='.', interpolate=True, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: get_mass(l, id)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: mass_plot(dict_list, y, part, logy=True, yaxis='$\\sigma$ [pb]', yscale=1.0, label=None, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: mass_vplot(dict_list, y, part, logy=True, yaxis='$\\sigma$ [pb]', yscale=1.0, label=None, mask=None, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: plot(dict_list, x, y, label=None, xaxis='E [GeV]', yaxis='$\\sigma$ [pb]', ratio=False, K=False, K_plus_1=False, logy=True, yscale=1.0, mask=None, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: index_open(var, idx)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: slha_data(li, index_list)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: slha_plot(li, x, y, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: vplot(x, y, label=None, xaxis='E [GeV]', yaxis='$\\sigma$ [pb]', logy=True, yscale=1.0, interpolate=True, plot_data=True, data_color=None, mask=-1, fill=False, data_fmt='.', fmt='-', **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: mass_mapplot(dict_list, part1, part2, z, logz=True, zaxis='$\\sigma$ [pb]', zscale=1.0, label=None)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: mapplot(dict_list, x, y, z, xaxis=None, yaxis=None, zaxis=None, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: map_vplot(vx, vy, vz, xaxis=None, yaxis=None, zaxis=None, logz=True, zscale=1.0)

   
















   ..
       !! processed by numpydoc !!

.. py:data:: fig
   

   
















   ..
       !! processed by numpydoc !!

.. py:data:: axs
   

   
















   ..
       !! processed by numpydoc !!

.. py:data:: lines
   :annotation: = []

   
















   ..
       !! processed by numpydoc !!

.. py:data:: labels
   :annotation: = []

   
















   ..
       !! processed by numpydoc !!

.. py:function:: err_plt(axes, x, y, label=None, error=False)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: scale_plot(dict_list, vl, seven_point_band=False, cont=False, error=True, li=None, plehn_color=False, yscale=1.0, unit='pb', **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: central_scale_plot(dict_list, vl, cont=False, error=True, yscale=1.0, unit='pb')

   
















   ..
       !! processed by numpydoc !!

.. py:function:: mass_and_K_plot(dl, li, p, scale=False, pdf=False, plehn=True, combined=False, cont=False, figsize=(6, 8), **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:function:: mass_and_ratio_plot(dl, li, p, scale=False, pdf=False, combined=False, cont=False, figsize=(6, 4), plot_data=True, fill=True, unit='pb', yscale=1.0, ylim=None, **kwargs)

   
















   ..
       !! processed by numpydoc !!

.. py:data:: package
   :annotation: = hepi

   
















   ..
       !! processed by numpydoc !!

.. py:data:: version
   

   
















   ..
       !! processed by numpydoc !!

.. py:data:: __version__
   

   
















   ..
       !! processed by numpydoc !!

