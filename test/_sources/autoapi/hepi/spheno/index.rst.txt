:py:mod:`hepi.spheno`
=====================

.. py:module:: hepi.spheno

.. autoapi-nested-parse::

   :mod:`hepi` interface to spheno.

   SPheno stands for S(upersymmetric) Pheno(menology) find it here https://spheno.hepforge.org/.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   run/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   hepi.spheno.Input



Functions
~~~~~~~~~

.. autoapisummary::

   hepi.spheno.get_input_dir
   hepi.spheno.update_slha
   hepi.spheno.set_path
   hepi.spheno.get_path
   hepi.spheno.run



Attributes
~~~~~~~~~~

.. autoapisummary::

   hepi.spheno.spheno_path


.. py:function:: get_input_dir()

   Get the input directory.

   :returns: :attr:`in_dir`
   :rtype: str


.. py:class:: Input(order: Order, energy: float, particle1: int, particle2: int, slha: str, pdf_lo: str, pdf_nlo: str, mu_f=1.0, mu_r=1.0, pdfset_lo=0, pdfset_nlo=0, precision=0.01, max_iters=50, invariant_mass='auto', result='total', pt='auto', id='', model_path='/opt/MG5_aMC_v2_7_0/models/MSSMatNLO_UFO', update=True)

   Bases: :py:obj:`hepi.util.DictData`

   Input for computation and scans.

   :ivar order: LO, NLO or NLO+NLL computation.
   :vartype order: :class:`Order`
   :ivar energy: CMS energy in GeV.
   :vartype energy: int
   :ivar energyhalf: Halfed `energy`.
   :vartype energyhalf: int
   :ivar particle1: PDG identifier of the first final state particle.
   :vartype particle1: int
   :ivar particle2: PDG identifier of the second final state particle.
   :vartype particle2: int
   :ivar slha: File path of for the base slha.
               Modified slha files will be used if a scan requires a change of the input.
   :vartype slha: str
   :ivar pdf_lo: LO PDF name.
   :vartype pdf_lo: str
   :ivar pdf_nlo: NLO PDF name.
   :vartype pdf_nlo: str
   :ivar pdfset_lo: LO PDF member/set id.
   :vartype pdfset_lo: int
   :ivar pdfset_nlo: NLO PDF member/set id.
   :vartype pdfset_nlo: int
   :ivar pdf_lo_id: LO PDF first member/set id.
   :vartype pdf_lo_id: int
   :ivar pdf_nlo_id: NLO PDF first member/set id.
   :vartype pdf_nlo_id: int
   :ivar mu: central scale factor.
   :vartype mu: double
   :ivar mu_f: Factorization scale factor.
   :vartype mu_f: double
   :ivar mu_r: Renormalization scale factor.
   :vartype mu_r: double
   :ivar precision: Desired numerical relative precision.
   :vartype precision: double
   :ivar max_iters: Upper limit on integration iterations.
   :vartype max_iters: int
   :ivar invariant_mass: Invariant mass mode 'auto = sqrt((p1+p2)^2)' else value.
   :vartype invariant_mass: str
   :ivar pt: Transverse Momentum mode 'auto' or value.
   :vartype pt: str
   :ivar result: Result type 'total'/'pt'/'ptj'/'m'.
   :vartype result: str
   :ivar id: Set an id of this run.
   :vartype id: str
   :ivar model_path: Path for MadGraph model.
   :vartype model_path: str
   :ivar update: Update dependent `mu`.

   :vartype update: bool


.. py:function:: update_slha(i: Input)

   Updates dependent parameters in Input `i`.

   Mainly concerns the `mu` value used by `madgraph`.




.. py:data:: spheno_path
   :annotation: = ~/git/SPheno-3.3.8/

   spheno folder containing the binary in './bin'.

.. py:function:: set_path(p: str)

   Set the path to the SPheno folder containing the binary in './bin'.

   :param p: new path.
   :type p: str


.. py:function:: get_path() -> str

   Get the SPheno path.

   :returns: current SPheno path.
   :rtype: str


.. py:function:: run(slhas: List[hepi.input.Input]) -> List[hepi.input.Input]

   Run the passed list of parameters for SPheno.

   :param slhas: Input parameters with a SLHA file that can be processed by SPheno.
   :type slhas: :obj:`list` of :class:`Input`

   :returns: :obj:`list` of :class:`Input`


