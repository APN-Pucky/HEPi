:py:mod:`hepi.spheno`
=====================

.. py:module:: hepi.spheno

.. autoapi-nested-parse::

   :mod:`hepi` interface to spheno.

   SPheno stands for S(upersymmetric) Pheno(menology) find it here https://spheno.hepforge.org/.



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   run/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   hepi.spheno.Input
   hepi.spheno.Runner
   hepi.spheno.SPhenoRunner



Functions
~~~~~~~~~

.. autoapisummary::

   hepi.spheno.get_input_dir
   hepi.spheno.update_slha



Attributes
~~~~~~~~~~

.. autoapisummary::

   hepi.spheno.spheno_default_runner
   hepi.spheno.run
   hepi.spheno.set_path
   hepi.spheno.get_path


.. py:function:: get_input_dir()

   Get the input directory.

   :returns: :attr:`in_dir`
   :rtype: str


.. py:class:: Input(order: Order, energy: float, particle1: int, particle2: int, slha: str, pdf_lo: str, pdf_nlo: str, mu_f=1.0, mu_r=1.0, pdfset_lo=0, pdfset_nlo=0, precision=0.01, max_iters=50, invariant_mass='auto', result='total', pt='auto', id='', model_path='/opt/MG5_aMC_v2_7_0/models/MSSMatNLO_UFO', update=True)

   Bases: :py:obj:`hepi.util.DictData`

   Input for computation and scans.

   :ivar order: LO, NLO or NLO+NLL computation.
   :vartype order: :class:`Order`
   :ivar energy: CMS energy in GeV.
   :vartype energy: int
   :ivar energyhalf: Halfed `energy`.
   :vartype energyhalf: int
   :ivar particle1: PDG identifier of the first final state particle.
   :vartype particle1: int
   :ivar particle2: PDG identifier of the second final state particle.
   :vartype particle2: int
   :ivar slha: File path of for the base slha.
               Modified slha files will be used if a scan requires a change of the input.
   :vartype slha: str
   :ivar pdf_lo: LO PDF name.
   :vartype pdf_lo: str
   :ivar pdf_nlo: NLO PDF name.
   :vartype pdf_nlo: str
   :ivar pdfset_lo: LO PDF member/set id.
   :vartype pdfset_lo: int
   :ivar pdfset_nlo: NLO PDF member/set id.
   :vartype pdfset_nlo: int
   :ivar pdf_lo_id: LO PDF first member/set id.
   :vartype pdf_lo_id: int
   :ivar pdf_nlo_id: NLO PDF first member/set id.
   :vartype pdf_nlo_id: int
   :ivar mu: central scale factor.
   :vartype mu: double
   :ivar mu_f: Factorization scale factor.
   :vartype mu_f: double
   :ivar mu_r: Renormalization scale factor.
   :vartype mu_r: double
   :ivar precision: Desired numerical relative precision.
   :vartype precision: double
   :ivar max_iters: Upper limit on integration iterations.
   :vartype max_iters: int
   :ivar invariant_mass: Invariant mass mode 'auto = sqrt((p1+p2)^2)' else value.
   :vartype invariant_mass: str
   :ivar pt: Transverse Momentum mode 'auto' or value.
   :vartype pt: str
   :ivar result: Result type 'total'/'pt'/'ptj'/'m'.
   :vartype result: str
   :ivar id: Set an id of this run.
   :vartype id: str
   :ivar model_path: Path for MadGraph model.
   :vartype model_path: str
   :ivar update: Update dependent `mu`.

   :vartype update: bool

   .. py:method:: has_gluino(self) -> bool


   .. py:method:: has_neutralino(self) -> bool


   .. py:method:: has_charginos(self) -> bool


   .. py:method:: has_weakino(self) -> bool


   .. py:method:: has_squark(self) -> bool


   .. py:method:: has_slepton(self) -> bool



.. py:function:: update_slha(i: Input)

   Updates dependent parameters in Input `i`.

   Mainly concerns the `mu` value used by `madgraph`.




.. py:class:: Runner(path: str, in_dir: str = None, out_dir: str = None, pre=None)

   .. py:method:: _prepare(self, p: hepi.input.Input, skip=True, **kwargs) -> RunParam


   .. py:method:: _check_input(self, param: hepi.input.Input, **kwargs) -> bool


   .. py:method:: _prepare_all(self, params: List[hepi.input.Input], **kwargs) -> List[RunParam]


   .. py:method:: run(self, params: List[hepi.input.Input], parse=True, parallel=True, sleep=0, **kwargs)

      Run the passed list of parameters.

      :param params: All parameters that should be executed/queued.
      :type params: :obj:`list` of :class:`hepi.Input`
      :param skip: True means stored runs will be skipped. Else the are overwritten.
      :type skip: bool
      :param parse: Parse the results.
                    This is not the prefered cluster/parallel mode, as there the function only queues the job.
      :type parse: bool
      :param parallel: Run jobs in parallel.
      :type parallel: bool
      :param sleep: Sleep seconds after starting job.
      :type sleep: int

      :returns:

                combined dictionary of results and parameters. Each member therein is a list.
                    The dictionary is empty if `parse` is set to False.
      :rtype: :obj:`dict`


   .. py:method:: _run(self, rps: List[RunParam], wait=True, parallel=True, sleep=0, **kwargs)

      Runs Runner per :class:`RunParams`.

      :param rps: Extended run parameters.
      :type rps: :obj:`list` of :class:`RunParams`
      :param bar: Enable info bar.
      :type bar: bool
      :param wait: Wait for parallel runs to finish.
      :type wait: bool
      :param sleep: Sleep seconds after starting subprocess.
      :type sleep: int
      :param parallel: Run jobs in parallel.
      :type parallel: bool

      :returns: return codes from jobs if `no_parse` is False.
      :rtype: :obj:`list` of int


   .. py:method:: _is_valid(self, file: str, p: hepi.input.Input, d) -> bool

      Verifies that a file is a complete output.

      :param file: File path to be parsed.
      :type file: str
      :param p: Onput parameters.
      :type p: :class:`hepi.Input`
      :param d: Param dictionary.
      :type d: :obj:`dict`

      :returns: True if `file` could be parsed.
      :rtype: bool


   .. py:method:: parse(self, outputs: List[str]) -> List[hepi.results.Result]

      Parses Resummino output files and returns List of Results.

      :param outputs: List of the filenames to be parsed.
      :type outputs: :obj:`list` of `str`

      :returns: :obj:`list` of :class:`hepi.resummino.result.ResumminoResult`


   .. py:method:: _parse_file(self, file: str) -> hepi.results.Result

      Extracts results from an output file.

      :param file: File path to be parsed.
      :type file: str

      :returns: If a value is not found in the file None is used.
      :rtype: :class:`Result`


   .. py:method:: get_path(self) -> str

      Get the Runner path.

      :returns: current Runner path.
      :rtype: str


   .. py:method:: get_input_dir(self) -> str

      Get the input directory.

      :returns: :attr:`in_dir`
      :rtype: str


   .. py:method:: get_output_dir(self) -> str

      Get the input directory.

      :returns: :attr:`out_dir`
      :rtype: str


   .. py:method:: get_pre(self) -> str

      Gets the command prefix.

      :returns: :attr:`pre`
      :rtype: str


   .. py:method:: set_path(self, p: str)

      Set the path to the Runner folder containing the binary in './bin'.

      :param p: new path.
      :type p: str


   .. py:method:: set_input_dir(self, ind: str)

      Sets the input directory.

      :param ind: new input directory.
      :type ind: str


   .. py:method:: set_output_dir(self, outd: str)

      Sets the output directory.

      :param outd: new output directory.
      :type outd: str


   .. py:method:: set_pre(self, ppre: str)

      Sets the command prefix.

      :param ppre: new command prefix.
      :type ppre: str



.. py:class:: SPhenoRunner(path: str, in_dir: str = None, out_dir: str = None, pre=None)

   Bases: :py:obj:`hepi.run.Runner`

   .. py:method:: run(self, slhas: List[hepi.input.Input], **kwargs) -> List[hepi.input.Input]

      Run the passed list of parameters for SPheno.

      :param slhas: Input parameters with a SLHA file that can be processed by SPheno.
      :type slhas: :obj:`list` of :class:`Input`

      :returns: :obj:`list` of :class:`Input`



.. py:data:: spheno_default_runner
   

   Default SPheno Runner to provide backward compatibility

.. py:data:: run
   

   

.. py:data:: set_path
   

   

.. py:data:: get_path
   

   

