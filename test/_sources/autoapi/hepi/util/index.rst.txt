:py:mod:`hepi.util`
===================

.. py:module:: hepi.util

.. autoapi-nested-parse::

   Collection of utility functions for the :mod:`hepi` package.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   hepi.util.DictData



Functions
~~~~~~~~~

.. autoapisummary::

   hepi.util.LD2DL
   hepi.util.get_name
   hepi.util.get_LR_partner
   hepi.util.namehash
   hepi.util.lhapdf_id_to_name
   hepi.util.lhapdf_name_to_id



Attributes
~~~~~~~~~~

.. autoapisummary::

   hepi.util.lhapdf_id_name
   hepi.util.lhapdf_name_id


.. py:class:: DictData

   .. py:method:: __str__(self)

      Return str(self).



.. py:function:: LD2DL(l: List)

   Convert a list of objects into a dictionary of lists.

   The values of each object are first converted to a `dict` through the `__dict__` attribute.

   :param l: list of objects.
   :type l: List

   :returns: dictionary of numpy arrays.
   :rtype: dict

   .. rubric:: Examples

   >>> class Param:
   ...      def __init__(self,a,b,c):
   ...         self.a = a
   ...         self.b = b
   ...         self.c = c
   >>> LD2DL([ Param(1,2,3), Param(4,5,6) , Param(7,8,9) ])
   {'a': array([1, 4, 7]), 'b': array([2, 5, 8]), 'c': array([3, 6, 9])}


.. py:function:: get_name(pid: int) -> str

   Get the latex name of a particle.

   :param pid: PDG Monte Carlo identifier for the particle.
   :type pid: int

   :returns: Latex name.
   :rtype: str

   .. rubric:: Examples

   >>> get_name(21)
   'g'
   >>> get_name(1000022)
   '\\tilde{\\chi}_{1}^{0}'


.. py:function:: get_LR_partner(pid: int) -> Tuple[int, int]

   Transforms a PDG id to it's left-right partner.

   :param pid: PDG Monte Carlo identifier for the particle.
   :type pid: int

   :returns: First int is -1 for Left and 1 for Right. Second int is the PDG id.
   :rtype: tuple

   .. rubric:: Examples

   >>> get_LR_partner(1000002)
   (-1, 2000002)


.. py:function:: namehash(n: any) -> str

   Creates a sha256 hash from the objects string representation.

   :param n: object.
   :type n: any

   :returns: sha256 of object.
   :rtype: str

   .. rubric:: Examples

   >>> p = {'a':1,'b':2}
   >>> str(p)
   "{'a': 1, 'b': 2}"
   >>> namehash(str(p))
   '3dffaea891e5dbadb390da33bad65f509dd667779330e2720df8165a253462b8'
   >>> namehash(p)
   '3dffaea891e5dbadb390da33bad65f509dd667779330e2720df8165a253462b8'


.. py:data:: lhapdf_id_name
   :annotation: :dict

   Dictionary of lhapdf names for given id.

.. py:data:: lhapdf_name_id
   :annotation: :dict

   Dictionary of lhapdf id for given name.

   Inversion of :attr:`lhapdf_id_name`.

.. py:function:: lhapdf_id_to_name(lid: int) -> str

   Converts a LHAPDF id to the sets name.

   :param lid: LHAPDF set id.
   :type lid: int

   :returns: name of the LHAPDF set.
   :rtype: str

   .. rubric:: Examples

   >>> lhapdf_id_to_name(30101175)
   'EPPS16_B_90CL_Au_hess'


.. py:function:: lhapdf_name_to_id(name: str) -> int

   Converts a LHAPDF name to the sets id.

   :param name: LHAPDF set name.
   :type name: str

   :returns: id of the LHAPDF set.
   :rtype: int

   .. rubric:: Examples

   >>> lhapdf_name_to_id("EPPS16_B_90CL_Au_hess")
   30101175


