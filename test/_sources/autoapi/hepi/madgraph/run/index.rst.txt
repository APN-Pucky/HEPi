:py:mod:`hepi.madgraph.run`
===========================

.. py:module:: hepi.madgraph.run

.. autoapi-nested-parse::

   Runs MadGraph.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   hepi.madgraph.run.MadGraphRunParams
   hepi.madgraph.run.MadGraphRunner




Attributes
~~~~~~~~~~

.. autoapisummary::

   hepi.madgraph.run.default_madgraph_runner
   hepi.madgraph.run.run
   hepi.madgraph.run.set_path
   hepi.madgraph.run.get_path


.. py:class:: MadGraphRunParams(dic, skip=False, madstr=True)

   Bases: :py:obj:`hepi.run.RunParam`

   Parameters for MadGraph.


.. py:class:: MadGraphRunner(path: str, in_dir: str = None, out_dir: str = None, pre=None)

   Bases: :py:obj:`hepi.run.Runner`

   .. py:method:: orders(self) -> List[hepi.input.Order]

      List of supported Orders in this runner.


   .. py:method:: _check_input(self, param: hepi.Input, **kwargs) -> bool

      Checks input parameter for compatibility with Prospino


   .. py:method:: _is_valid(self, file: str, p: hepi.Input, d) -> bool

      Verifies that a file is a complete output.

      :param file: File path to be parsed.
      :type file: str
      :param p: Onput parameters.
      :type p: :class:`hepi.Input`
      :param d: Param dictionary.
      :type d: :obj:`dict`

      :returns: True if `file` could be parsed.
      :rtype: bool


   .. py:method:: _parse_file(self, file: str) -> hepi.Result

      Extracts results from an output file.

      :param file: File path to be parsed.
      :type file: str

      :returns: If a value is not found in the file None is used.
      :rtype: :class:`Result`


   .. py:method:: _run(self, rps: List[hepi.run.RunParam], wait=True, parallel=True, sleep=0, **kwargs)

      Runs Runner per :class:`RunParams`.

      :param rps: Extended run parameters.
      :type rps: :obj:`list` of :class:`RunParams`
      :param bar: Enable info bar.
      :type bar: bool
      :param wait: Wait for parallel runs to finish.
      :type wait: bool
      :param sleep: Sleep seconds after starting subprocess.
      :type sleep: int
      :param parallel: Run jobs in parallel.
      :type parallel: bool

      :returns: return codes from jobs if `no_parse` is False.
      :rtype: :obj:`list` of int


   .. py:method:: _prepare(self, p: hepi.Input, **kwargs) -> hepi.run.RunParam



.. py:data:: default_madgraph_runner
   

   Default MadGraph Runner to provide backward compatibility

.. py:data:: run
   

   

.. py:data:: set_path
   

   

.. py:data:: get_path
   

   

