:py:mod:`hepi.run`
==================

.. py:module:: hepi.run


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   hepi.run.RunParam
   hepi.run.Runner




.. py:class:: RunParam(skip: bool = False, in_file: str = None, out_file: str = None, execute: str = None, name: str = None)

   Bases: :py:obj:`hepi.util.DictData`

   Abstract class that is similar to a dictionary but with fixed keys.


.. py:class:: Runner(path: str, in_dir: str = None, out_dir: str = None, pre=None)

   .. py:method:: orders(self) -> List[hepi.input.Order]

      List of supported Orders in this runner.


   .. py:method:: get_name(self) -> str

      Returns the name of the runner.


   .. py:method:: _check_path(self) -> bool

      Checks if the passed path is valid.


   .. py:method:: _prepare(self, p: hepi.input.Input, **kwargs) -> RunParam


   .. py:method:: _check_input(self, param: hepi.input.Input, **kwargs) -> bool


   .. py:method:: _prepare_all(self, params: List[hepi.input.Input], skip=True, **kwargs) -> List[RunParam]


   .. py:method:: run(self, params: List[hepi.input.Input], skip=True, parse=True, parallel=True, sleep=0, run=True, **kwargs)

          Run the passed list of parameters.

          Args:
              params (:obj:`list` of :class:`hepi.Input`): All parameters that should be executed/queued.
              skip (bool): True means stored runs will be skipped. Else the are overwritten.
              parse (bool): Parse the results.
                  This is not the prefered cluster/parallel mode, as there the function only queues the job.
              parallel (bool): Run jobs in parallel.
              sleep (int): Sleep seconds after starting job.
      run (bool): Actually start/queue runner.

          Returns:
              :obj:`dict` : combined dictionary of results and parameters. Each member therein is a list.
                  The dictionary is empty if `parse` is set to False.




   .. py:method:: _run(self, rps: List[RunParam], wait=True, parallel=True, sleep=0, **kwargs)

      Runs Runner per :class:`RunParams`.

      :param rps: Extended run parameters.
      :type rps: :obj:`list` of :class:`RunParams`
      :param bar: Enable info bar.
      :type bar: bool
      :param wait: Wait for parallel runs to finish.
      :type wait: bool
      :param sleep: Sleep seconds after starting subprocess.
      :type sleep: int
      :param parallel: Run jobs in parallel.
      :type parallel: bool

      :returns: return codes from jobs if `no_parse` is False.
      :rtype: :obj:`list` of int


   .. py:method:: _is_valid(self, file: str, p: hepi.input.Input, d) -> bool

      Verifies that a file is a complete output.

      :param file: File path to be parsed.
      :type file: str
      :param p: Onput parameters.
      :type p: :class:`hepi.Input`
      :param d: Param dictionary.
      :type d: :obj:`dict`

      :returns: True if `file` could be parsed.
      :rtype: bool


   .. py:method:: parse(self, outputs: List[str]) -> List[hepi.results.Result]

      Parses Resummino output files and returns List of Results.

      :param outputs: List of the filenames to be parsed.
      :type outputs: :obj:`list` of `str`

      :returns: :obj:`list` of :class:`hepi.resummino.result.ResumminoResult`


   .. py:method:: _parse_file(self, file: str) -> hepi.results.Result

      Extracts results from an output file.

      :param file: File path to be parsed.
      :type file: str

      :returns: If a value is not found in the file None is used.
      :rtype: :class:`Result`


   .. py:method:: get_path(self) -> str

      Get the Runner path.

      :returns: current Runner path.
      :rtype: str


   .. py:method:: get_input_dir(self) -> str

      Get the input directory.

      :returns: :attr:`in_dir`
      :rtype: str


   .. py:method:: get_output_dir(self) -> str

      Get the input directory.

      :returns: :attr:`out_dir`
      :rtype: str


   .. py:method:: get_pre(self) -> str

      Gets the command prefix.

      :returns: :attr:`pre`
      :rtype: str


   .. py:method:: set_path(self, p: str)

      Set the path to the Runner folder containing the binary in './bin'.

      :param p: new path.
      :type p: str


   .. py:method:: set_input_dir(self, indir: str)

      Sets the input directory.

      :param indir: new input directory.
      :type indir: str


   .. py:method:: set_output_dir(self, outdir: str, create: bool = True)

      Sets the output directory.

      :param outdir: new output directory.
                     create (bool): create directory if not existing.
      :type outdir: str


   .. py:method:: set_pre(self, ppre: str)

      Sets the command prefix.

      :param ppre: new command prefix.
      :type ppre: str



